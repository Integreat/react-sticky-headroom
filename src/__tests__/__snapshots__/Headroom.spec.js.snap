// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Headroom should render correct if state is pinned, transition 1`] = `
.c0 {
  position: -webkit-sticky;
  position: sticky;
  top: 0px;
  z-index: 1;
  -webkit-transform: translateY(0px);
  -ms-transform: translateY(0px);
  transform: translateY(0px);
  -webkit-animation-duration: 0.2s;
  animation-duration: 0.2s;
  -webkit-animation-timing-function: ease-out;
  animation-timing-function: ease-out;
  -webkit-transition: -webkit-transform 0.2s ease-out;
  -webkit-transition: transform 0.2s ease-out;
  transition: transform 0.2s ease-out;
}

<Headroom
  height={100}
  pinStart={10}
  scrollHeight={50}
>
  <Headroom__HeaderWrapper
    animateUpFrom={null}
    static={false}
    top={0}
    transition="normal"
    translateY={0}
  >
    <StyledComponent
      animateUpFrom={null}
      forwardedClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "Headroom__HeaderWrapper-sc-16d3zk-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "position:",
              [Function],
              ";top:",
              [Function],
              "px;z-index:1;transform:translateY(",
              [Function],
              "px);animation-duration:0.2s;animation-timing-function:ease-out;",
              [Function],
              " ",
              [Function],
              " ",
              [Function],
            ],
          },
          "displayName": "Headroom__HeaderWrapper",
          "render": [Function],
          "styledComponentId": "Headroom__HeaderWrapper-sc-16d3zk-0",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      static={false}
      top={0}
      transition="normal"
      translateY={0}
    >
      <div
        className="c0"
      >
        <MockNode>
          <div />
        </MockNode>
      </div>
    </StyledComponent>
  </Headroom__HeaderWrapper>
</Headroom>
`;

exports[`Headroom should render correct if state is static, no transition 1`] = `
.c0 {
  position: -webkit-sticky;
  position: sticky;
  top: -50px;
  z-index: 1;
  -webkit-transform: translateY(0px);
  -ms-transform: translateY(0px);
  transform: translateY(0px);
  -webkit-animation-duration: 0.2s;
  animation-duration: 0.2s;
  -webkit-animation-timing-function: ease-out;
  animation-timing-function: ease-out;
  -webkit-transition: none;
  transition: none;
}

<Headroom
  height={100}
  pinStart={10}
  scrollHeight={50}
>
  <Headroom__HeaderWrapper
    animateUpFrom={null}
    static={true}
    top={-50}
    transition="none"
    translateY={0}
  >
    <StyledComponent
      animateUpFrom={null}
      forwardedClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "Headroom__HeaderWrapper-sc-16d3zk-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "position:",
              [Function],
              ";top:",
              [Function],
              "px;z-index:1;transform:translateY(",
              [Function],
              "px);animation-duration:0.2s;animation-timing-function:ease-out;",
              [Function],
              " ",
              [Function],
              " ",
              [Function],
            ],
          },
          "displayName": "Headroom__HeaderWrapper",
          "render": [Function],
          "styledComponentId": "Headroom__HeaderWrapper-sc-16d3zk-0",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      static={true}
      top={-50}
      transition="none"
      translateY={0}
    >
      <div
        className="c0"
      >
        <MockNode>
          <div />
        </MockNode>
      </div>
    </StyledComponent>
  </Headroom__HeaderWrapper>
</Headroom>
`;

exports[`Headroom should render correct if state is unpinned, no transition 1`] = `
.c0 {
  position: -webkit-sticky;
  position: sticky;
  top: 0px;
  z-index: 1;
  -webkit-transform: translateY(-50px);
  -ms-transform: translateY(-50px);
  transform: translateY(-50px);
  -webkit-animation-duration: 0.2s;
  animation-duration: 0.2s;
  -webkit-animation-timing-function: ease-out;
  animation-timing-function: ease-out;
}

<Headroom
  height={100}
  pinStart={10}
  scrollHeight={50}
>
  <Headroom__HeaderWrapper
    animateUpFrom={null}
    static={false}
    top={0}
    transition="none"
    translateY={-50}
  >
    <StyledComponent
      animateUpFrom={null}
      forwardedClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "Headroom__HeaderWrapper-sc-16d3zk-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "position:",
              [Function],
              ";top:",
              [Function],
              "px;z-index:1;transform:translateY(",
              [Function],
              "px);animation-duration:0.2s;animation-timing-function:ease-out;",
              [Function],
              " ",
              [Function],
              " ",
              [Function],
            ],
          },
          "displayName": "Headroom__HeaderWrapper",
          "render": [Function],
          "styledComponentId": "Headroom__HeaderWrapper-sc-16d3zk-0",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      static={false}
      top={0}
      transition="none"
      translateY={-50}
    >
      <div
        className="c0"
      >
        <MockNode>
          <div />
        </MockNode>
      </div>
    </StyledComponent>
  </Headroom__HeaderWrapper>
</Headroom>
`;

exports[`Headroom should render correct if state is unpinned, transition 1`] = `
.c0 {
  position: -webkit-sticky;
  position: sticky;
  top: 0px;
  z-index: 1;
  -webkit-transform: translateY(-50px);
  -ms-transform: translateY(-50px);
  transform: translateY(-50px);
  -webkit-animation-duration: 0.2s;
  animation-duration: 0.2s;
  -webkit-animation-timing-function: ease-out;
  animation-timing-function: ease-out;
  -webkit-transition: -webkit-transform 0.2s ease-out;
  -webkit-transition: transform 0.2s ease-out;
  transition: transform 0.2s ease-out;
}

<Headroom
  height={100}
  pinStart={10}
  scrollHeight={50}
>
  <Headroom__HeaderWrapper
    animateUpFrom={null}
    static={false}
    top={0}
    transition="normal"
    translateY={-50}
  >
    <StyledComponent
      animateUpFrom={null}
      forwardedClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "Headroom__HeaderWrapper-sc-16d3zk-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "position:",
              [Function],
              ";top:",
              [Function],
              "px;z-index:1;transform:translateY(",
              [Function],
              "px);animation-duration:0.2s;animation-timing-function:ease-out;",
              [Function],
              " ",
              [Function],
              " ",
              [Function],
            ],
          },
          "displayName": "Headroom__HeaderWrapper",
          "render": [Function],
          "styledComponentId": "Headroom__HeaderWrapper-sc-16d3zk-0",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      static={false}
      top={0}
      transition="normal"
      translateY={-50}
    >
      <div
        className="c0"
      >
        <MockNode>
          <div />
        </MockNode>
      </div>
    </StyledComponent>
  </Headroom__HeaderWrapper>
</Headroom>
`;

exports[`Headroom should render with no stickyAncestor supplied 1`] = `
<Fragment>
  <Headroom__HeaderWrapper
    animateUpFrom={null}
    static={true}
    top={-50}
    transition="none"
    translateY={0}
  >
    <MockNode />
  </Headroom__HeaderWrapper>
</Fragment>
`;

exports[`Headroom should render with values from its state 1`] = `
.c0 {
  position: -webkit-sticky;
  position: sticky;
  top: -50px;
  z-index: 1;
  -webkit-transform: translateY(0px);
  -ms-transform: translateY(0px);
  transform: translateY(0px);
  -webkit-animation-duration: 0.2s;
  animation-duration: 0.2s;
  -webkit-animation-timing-function: ease-out;
  animation-timing-function: ease-out;
  -webkit-transition: none;
  transition: none;
}

<Headroom
  height={100}
  pinStart={0}
  scrollHeight={50}
>
  <Headroom__HeaderWrapper
    animateUpFrom={null}
    static={true}
    top={-50}
    transition="none"
    translateY={0}
  >
    <StyledComponent
      animateUpFrom={null}
      forwardedClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "Headroom__HeaderWrapper-sc-16d3zk-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "position:",
              [Function],
              ";top:",
              [Function],
              "px;z-index:1;transform:translateY(",
              [Function],
              "px);animation-duration:0.2s;animation-timing-function:ease-out;",
              [Function],
              " ",
              [Function],
              " ",
              [Function],
            ],
          },
          "displayName": "Headroom__HeaderWrapper",
          "render": [Function],
          "styledComponentId": "Headroom__HeaderWrapper-sc-16d3zk-0",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      static={true}
      top={-50}
      transition="none"
      translateY={0}
    >
      <div
        className="c0"
      >
        <MockNode>
          <div />
        </MockNode>
      </div>
    </StyledComponent>
  </Headroom__HeaderWrapper>
</Headroom>
`;
